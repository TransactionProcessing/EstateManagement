// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by Reqnroll (https://www.reqnroll.net/).
//      Reqnroll Version:1.0.0.0
//      Reqnroll Generator Version:1.0.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace EstateManagement.IntegrationTests.Features
{
    using Reqnroll;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Reqnroll", "1.0.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [Xunit.TraitAttribute("Category", "base")]
    [Xunit.TraitAttribute("Category", "shared")]
    public partial class MerchantFeature : object, Xunit.IClassFixture<MerchantFeature.FixtureData>, Xunit.IAsyncLifetime
    {
        
        private static Reqnroll.ITestRunner testRunner;
        
        private static string[] featureTags = new string[] {
                "base",
                "shared"};
        
        private Xunit.Abstractions.ITestOutputHelper _testOutputHelper;
        
#line 1 "Merchant.feature"
#line hidden
        
        public MerchantFeature(MerchantFeature.FixtureData fixtureData, Xunit.Abstractions.ITestOutputHelper testOutputHelper)
        {
            this._testOutputHelper = testOutputHelper;
        }
        
        public static async System.Threading.Tasks.Task FeatureSetupAsync()
        {
            testRunner = Reqnroll.TestRunnerManager.GetTestRunnerForAssembly(null, Reqnroll.xUnit.ReqnrollPlugin.XUnitParallelWorkerTracker.Instance.GetWorkerId());
            Reqnroll.FeatureInfo featureInfo = new Reqnroll.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features", "Merchant", null, ProgrammingLanguage.CSharp, featureTags);
            await testRunner.OnFeatureStartAsync(featureInfo);
        }
        
        public static async System.Threading.Tasks.Task FeatureTearDownAsync()
        {
            string testWorkerId = testRunner.TestWorkerId;
            await testRunner.OnFeatureEndAsync();
            testRunner = null;
            Reqnroll.xUnit.ReqnrollPlugin.XUnitParallelWorkerTracker.Instance.ReleaseWorker(testWorkerId);
        }
        
        public async System.Threading.Tasks.Task TestInitializeAsync()
        {
        }
        
        public async System.Threading.Tasks.Task TestTearDownAsync()
        {
            await testRunner.OnScenarioEndAsync();
        }
        
        public void ScenarioInitialize(Reqnroll.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Xunit.Abstractions.ITestOutputHelper>(_testOutputHelper);
        }
        
        public async System.Threading.Tasks.Task ScenarioStartAsync()
        {
            await testRunner.OnScenarioStartAsync();
        }
        
        public async System.Threading.Tasks.Task ScenarioCleanupAsync()
        {
            await testRunner.CollectScenarioErrorsAsync();
        }
        
        public virtual async System.Threading.Tasks.Task FeatureBackgroundAsync()
        {
#line 4
#line hidden
            Reqnroll.Table table36 = new Reqnroll.Table(new string[] {
                        "Role Name"});
            table36.AddRow(new string[] {
                        "Estate"});
            table36.AddRow(new string[] {
                        "Merchant"});
#line 6
 await testRunner.GivenAsync("the following security roles exist", ((string)(null)), table36, "Given ");
#line hidden
            Reqnroll.Table table37 = new Reqnroll.Table(new string[] {
                        "Name",
                        "DisplayName",
                        "Description"});
            table37.AddRow(new string[] {
                        "estateManagement",
                        "Estate Managememt REST Scope",
                        "A scope for Estate Managememt REST"});
#line 11
 await testRunner.GivenAsync("I create the following api scopes", ((string)(null)), table37, "Given ");
#line hidden
            Reqnroll.Table table38 = new Reqnroll.Table(new string[] {
                        "Name",
                        "DisplayName",
                        "Secret",
                        "Scopes",
                        "UserClaims"});
            table38.AddRow(new string[] {
                        "estateManagement",
                        "Estate Managememt REST",
                        "Secret1",
                        "estateManagement",
                        "merchantId, estateId, role"});
#line 15
 await testRunner.GivenAsync("the following api resources exist", ((string)(null)), table38, "Given ");
#line hidden
            Reqnroll.Table table39 = new Reqnroll.Table(new string[] {
                        "ClientId",
                        "ClientName",
                        "Secret",
                        "Scopes",
                        "GrantTypes"});
            table39.AddRow(new string[] {
                        "serviceClient",
                        "Service Client",
                        "Secret1",
                        "estateManagement",
                        "client_credentials"});
            table39.AddRow(new string[] {
                        "estateClient",
                        "Estate Client",
                        "Secret1",
                        "estateManagement",
                        "password"});
#line 19
 await testRunner.GivenAsync("the following clients exist", ((string)(null)), table39, "Given ");
#line hidden
            Reqnroll.Table table40 = new Reqnroll.Table(new string[] {
                        "ClientId"});
            table40.AddRow(new string[] {
                        "serviceClient"});
#line 24
 await testRunner.GivenAsync("I have a token to access the estate management resource", ((string)(null)), table40, "Given ");
#line hidden
            Reqnroll.Table table41 = new Reqnroll.Table(new string[] {
                        "EstateName"});
            table41.AddRow(new string[] {
                        "Test Estate 1"});
            table41.AddRow(new string[] {
                        "Test Estate 2"});
#line 28
 await testRunner.GivenAsync("I have created the following estates", ((string)(null)), table41, "Given ");
#line hidden
            Reqnroll.Table table42 = new Reqnroll.Table(new string[] {
                        "EstateName",
                        "OperatorName",
                        "RequireCustomMerchantNumber",
                        "RequireCustomTerminalNumber"});
            table42.AddRow(new string[] {
                        "Test Estate 1",
                        "Test Operator 1",
                        "True",
                        "True"});
            table42.AddRow(new string[] {
                        "Test Estate 2",
                        "Test Operator 1",
                        "True",
                        "True"});
#line 33
 await testRunner.GivenAsync("I have created the following operators", ((string)(null)), table42, "Given ");
#line hidden
            Reqnroll.Table table43 = new Reqnroll.Table(new string[] {
                        "EmailAddress",
                        "Password",
                        "GivenName",
                        "FamilyName",
                        "EstateName"});
            table43.AddRow(new string[] {
                        "estateuser1@testestate1.co.uk",
                        "123456",
                        "TestEstate",
                        "User1",
                        "Test Estate 1"});
            table43.AddRow(new string[] {
                        "estateuser1@testestate2.co.uk",
                        "123456",
                        "TestEstate",
                        "User1",
                        "Test Estate 2"});
#line 38
 await testRunner.GivenAsync("I have created the following security users", ((string)(null)), table43, "Given ");
#line hidden
        }
        
        async System.Threading.Tasks.Task Xunit.IAsyncLifetime.InitializeAsync()
        {
            await this.TestInitializeAsync();
        }
        
        async System.Threading.Tasks.Task Xunit.IAsyncLifetime.DisposeAsync()
        {
            await this.TestTearDownAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Get Invalid Merchant - System Login")]
        [Xunit.TraitAttribute("FeatureTitle", "Merchant")]
        [Xunit.TraitAttribute("Description", "Get Invalid Merchant - System Login")]
        public async System.Threading.Tasks.Task GetInvalidMerchant_SystemLogin()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            Reqnroll.ScenarioInfo scenarioInfo = new Reqnroll.ScenarioInfo("Get Invalid Merchant - System Login", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 43
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 4
await this.FeatureBackgroundAsync();
#line hidden
#line 44
 await testRunner.WhenAsync("I get the merchant \"Test Merchant 1\" for estate \"Test Estate 1\" an error is retur" +
                        "ned", ((string)(null)), ((Reqnroll.Table)(null)), "When ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Get Invalid Merchant - Estate User")]
        [Xunit.TraitAttribute("FeatureTitle", "Merchant")]
        [Xunit.TraitAttribute("Description", "Get Invalid Merchant - Estate User")]
        public async System.Threading.Tasks.Task GetInvalidMerchant_EstateUser()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            Reqnroll.ScenarioInfo scenarioInfo = new Reqnroll.ScenarioInfo("Get Invalid Merchant - Estate User", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 46
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 4
await this.FeatureBackgroundAsync();
#line hidden
#line 47
 await testRunner.GivenAsync("I am logged in as \"estateuser1@testestate1.co.uk\" with password \"123456\" for Esta" +
                        "te \"Test Estate 1\" with client \"estateClient\"", ((string)(null)), ((Reqnroll.Table)(null)), "Given ");
#line hidden
#line 48
 await testRunner.WhenAsync("I get the merchant \"Test Merchant 1\" for estate \"Test Estate 1\" an error is retur" +
                        "ned", ((string)(null)), ((Reqnroll.Table)(null)), "When ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Create Merchant - System Login")]
        [Xunit.TraitAttribute("FeatureTitle", "Merchant")]
        [Xunit.TraitAttribute("Description", "Create Merchant - System Login")]
        public async System.Threading.Tasks.Task CreateMerchant_SystemLogin()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            Reqnroll.ScenarioInfo scenarioInfo = new Reqnroll.ScenarioInfo("Create Merchant - System Login", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 50
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 4
await this.FeatureBackgroundAsync();
#line hidden
                Reqnroll.Table table44 = new Reqnroll.Table(new string[] {
                            "MerchantName",
                            "AddressLine1",
                            "Town",
                            "Region",
                            "Country",
                            "ContactName",
                            "EmailAddress",
                            "EstateName",
                            "SettlementSchedule"});
                table44.AddRow(new string[] {
                            "Test Merchant 1",
                            "Address Line 1",
                            "TestTown",
                            "Test Region",
                            "United Kingdom",
                            "Test Contact 1",
                            "testcontact1@merchant1.co.uk",
                            "Test Estate 1",
                            "Weekly"});
#line 51
 await testRunner.WhenAsync("I create the following merchants", ((string)(null)), table44, "When ");
#line hidden
                Reqnroll.Table table45 = new Reqnroll.Table(new string[] {
                            "OperatorName",
                            "MerchantName",
                            "MerchantNumber",
                            "TerminalNumber",
                            "EstateName"});
                table45.AddRow(new string[] {
                            "Test Operator 1",
                            "Test Merchant 1",
                            "00000001",
                            "10000001",
                            "Test Estate 1"});
#line 54
 await testRunner.WhenAsync("I assign the following operator to the merchants", ((string)(null)), table45, "When ");
#line hidden
                Reqnroll.Table table46 = new Reqnroll.Table(new string[] {
                            "EmailAddress",
                            "Password",
                            "GivenName",
                            "FamilyName",
                            "MerchantName",
                            "EstateName"});
                table46.AddRow(new string[] {
                            "merchantuser1@testmerchant1.co.uk",
                            "123456",
                            "TestMerchant",
                            "User1",
                            "Test Merchant 1",
                            "Test Estate 1"});
#line 57
 await testRunner.WhenAsync("I create the following security users", ((string)(null)), table46, "When ");
#line hidden
                Reqnroll.Table table47 = new Reqnroll.Table(new string[] {
                            "DeviceIdentifier",
                            "MerchantName",
                            "EstateName"});
                table47.AddRow(new string[] {
                            "TestDevice1",
                            "Test Merchant 1",
                            "Test Estate 1"});
#line 60
 await testRunner.WhenAsync("I add the following devices to the merchant", ((string)(null)), table47, "When ");
#line hidden
                Reqnroll.Table table48 = new Reqnroll.Table(new string[] {
                            "OriginalDeviceIdentifier",
                            "NewDeviceIdentifier",
                            "MerchantName",
                            "EstateName"});
                table48.AddRow(new string[] {
                            "TestDevice1",
                            "TestDevice2",
                            "Test Merchant 1",
                            "Test Estate 1"});
#line 63
 await testRunner.WhenAsync("I swap the merchant device the device is swapped", ((string)(null)), table48, "When ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Create Merchant - Estate User")]
        [Xunit.TraitAttribute("FeatureTitle", "Merchant")]
        [Xunit.TraitAttribute("Description", "Create Merchant - Estate User")]
        public async System.Threading.Tasks.Task CreateMerchant_EstateUser()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            Reqnroll.ScenarioInfo scenarioInfo = new Reqnroll.ScenarioInfo("Create Merchant - Estate User", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 67
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 4
await this.FeatureBackgroundAsync();
#line hidden
#line 68
 await testRunner.GivenAsync("I am logged in as \"estateuser1@testestate1.co.uk\" with password \"123456\" for Esta" +
                        "te \"Test Estate 1\" with client \"estateClient\"", ((string)(null)), ((Reqnroll.Table)(null)), "Given ");
#line hidden
                Reqnroll.Table table49 = new Reqnroll.Table(new string[] {
                            "MerchantName",
                            "AddressLine1",
                            "Town",
                            "Region",
                            "Country",
                            "ContactName",
                            "EmailAddress",
                            "EstateName",
                            "SettlementSchedule"});
                table49.AddRow(new string[] {
                            "Test Merchant 1",
                            "Address Line 1",
                            "TestTown",
                            "Test Region",
                            "United Kingdom",
                            "Test Contact 1",
                            "testcontact1@merchant1.co.uk",
                            "Test Estate 1",
                            "Weekly"});
#line 69
 await testRunner.WhenAsync("I create the following merchants", ((string)(null)), table49, "When ");
#line hidden
                Reqnroll.Table table50 = new Reqnroll.Table(new string[] {
                            "OperatorName",
                            "MerchantName",
                            "MerchantNumber",
                            "TerminalNumber",
                            "EstateName"});
                table50.AddRow(new string[] {
                            "Test Operator 1",
                            "Test Merchant 1",
                            "00000001",
                            "10000001",
                            "Test Estate 1"});
#line 72
 await testRunner.WhenAsync("I assign the following operator to the merchants", ((string)(null)), table50, "When ");
#line hidden
                Reqnroll.Table table51 = new Reqnroll.Table(new string[] {
                            "EmailAddress",
                            "Password",
                            "GivenName",
                            "FamilyName",
                            "MerchantName",
                            "EstateName"});
                table51.AddRow(new string[] {
                            "merchantuser1@testmerchant1.co.uk",
                            "123456",
                            "TestMerchant",
                            "User1",
                            "Test Merchant 1",
                            "Test Estate 1"});
#line 75
 await testRunner.WhenAsync("I create the following security users", ((string)(null)), table51, "When ");
#line hidden
                Reqnroll.Table table52 = new Reqnroll.Table(new string[] {
                            "DeviceIdentifier",
                            "MerchantName",
                            "EstateName"});
                table52.AddRow(new string[] {
                            "TestDevice1",
                            "Test Merchant 1",
                            "Test Estate 1"});
#line 78
 await testRunner.WhenAsync("I add the following devices to the merchant", ((string)(null)), table52, "When ");
#line hidden
                Reqnroll.Table table53 = new Reqnroll.Table(new string[] {
                            "OriginalDeviceIdentifier",
                            "NewDeviceIdentifier",
                            "MerchantName",
                            "EstateName"});
                table53.AddRow(new string[] {
                            "TestDevice1",
                            "TestDevice2",
                            "Test Merchant 1",
                            "Test Estate 1"});
#line 81
 await testRunner.WhenAsync("I swap the merchant device the device is swapped", ((string)(null)), table53, "When ");
#line hidden
                Reqnroll.Table table54 = new Reqnroll.Table(new string[] {
                            "Reference",
                            "Amount",
                            "DateTime",
                            "MerchantName",
                            "EstateName"});
                table54.AddRow(new string[] {
                            "Deposit1",
                            "500.00",
                            "LastMonth",
                            "Test Merchant 1",
                            "Test Estate 1"});
                table54.AddRow(new string[] {
                            "Deposit2",
                            "1000.00",
                            "LastWeek",
                            "Test Merchant 1",
                            "Test Estate 1"});
                table54.AddRow(new string[] {
                            "Deposit3",
                            "1000.00",
                            "Yesterday",
                            "Test Merchant 1",
                            "Test Estate 1"});
                table54.AddRow(new string[] {
                            "Deposit4",
                            "400.00",
                            "Today",
                            "Test Merchant 1",
                            "Test Estate 1"});
#line 84
 await testRunner.WhenAsync("I make the following manual merchant deposits", ((string)(null)), table54, "When ");
#line hidden
                Reqnroll.Table table55 = new Reqnroll.Table(new string[] {
                            "Amount",
                            "DateTime",
                            "MerchantName",
                            "EstateName"});
                table55.AddRow(new string[] {
                            "400.00",
                            "LastMonth",
                            "Test Merchant 1",
                            "Test Estate 1"});
#line 91
 await testRunner.WhenAsync("I make the following merchant withdrawals", ((string)(null)), table55, "When ");
#line hidden
                Reqnroll.Table table56 = new Reqnroll.Table(new string[] {
                            "Amount",
                            "DateTime",
                            "MerchantName",
                            "EstateName"});
                table56.AddRow(new string[] {
                            "500.00",
                            "LastMonth",
                            "Test Merchant 1",
                            "Test Estate 1"});
                table56.AddRow(new string[] {
                            "1000.00",
                            "LastWeek",
                            "Test Merchant 1",
                            "Test Estate 1"});
                table56.AddRow(new string[] {
                            "1000.00",
                            "Yesterday",
                            "Test Merchant 1",
                            "Test Estate 1"});
                table56.AddRow(new string[] {
                            "400.00",
                            "Today",
                            "Test Merchant 1",
                            "Test Estate 1"});
#line 95
 await testRunner.WhenAsync("I make the following automatic merchant deposits", ((string)(null)), table56, "When ");
#line hidden
                Reqnroll.Table table57 = new Reqnroll.Table(new string[] {
                            "Amount",
                            "DateTime",
                            "MerchantName",
                            "EstateName"});
                table57.AddRow(new string[] {
                            "0",
                            "LastMonth",
                            "Test Merchant 1",
                            "Test Estate 1"});
#line 102
 await testRunner.WhenAsync("I make the following manual merchant deposits the deposit is rejected", ((string)(null)), table57, "When ");
#line hidden
                Reqnroll.Table table58 = new Reqnroll.Table(new string[] {
                            "Amount",
                            "DateTime",
                            "MerchantName",
                            "EstateName"});
                table58.AddRow(new string[] {
                            "-100",
                            "LastMonth",
                            "Test Merchant 1",
                            "Test Estate 1"});
#line 106
 await testRunner.WhenAsync("I make the following manual merchant deposits the deposit is rejected", ((string)(null)), table58, "When ");
#line hidden
                Reqnroll.Table table59 = new Reqnroll.Table(new string[] {
                            "Amount",
                            "DateTime",
                            "MerchantName",
                            "EstateName"});
                table59.AddRow(new string[] {
                            "0",
                            "LastMonth",
                            "Test Merchant 1",
                            "Test Estate 1"});
#line 110
 await testRunner.WhenAsync("I make the following automatic merchant deposits the deposit is rejected", ((string)(null)), table59, "When ");
#line hidden
                Reqnroll.Table table60 = new Reqnroll.Table(new string[] {
                            "Amount",
                            "DateTime",
                            "MerchantName",
                            "EstateName"});
                table60.AddRow(new string[] {
                            "-100",
                            "LastMonth",
                            "Test Merchant 1",
                            "Test Estate 1"});
#line 114
 await testRunner.WhenAsync("I make the following automatic merchant deposits the deposit is rejected", ((string)(null)), table60, "When ");
#line hidden
                Reqnroll.Table table61 = new Reqnroll.Table(new string[] {
                            "MerchantName",
                            "AddressLine1",
                            "Town",
                            "Region",
                            "Country",
                            "ContactName",
                            "EmailAddress",
                            "EstateName"});
                table61.AddRow(new string[] {
                            "Test Merchant 2",
                            "Address Line 1",
                            "TestTown",
                            "Test Region",
                            "United Kingdom",
                            "Test Contact 1",
                            "testcontact1@merchant1.co.uk",
                            "Test Estate 1"});
                table61.AddRow(new string[] {
                            "Test Merchant 3",
                            "Address Line 1",
                            "TestTown",
                            "Test Region",
                            "United Kingdom",
                            "Test Contact 1",
                            "testcontact1@merchant1.co.uk",
                            "Test Estate 1"});
                table61.AddRow(new string[] {
                            "Test Merchant 4",
                            "Address Line 1",
                            "TestTown",
                            "Test Region",
                            "United Kingdom",
                            "Test Contact 1",
                            "testcontact1@merchant1.co.uk",
                            "Test Estate 1"});
#line 118
 await testRunner.GivenAsync("I create the following merchants", ((string)(null)), table61, "Given ");
#line hidden
                Reqnroll.Table table62 = new Reqnroll.Table(new string[] {
                            "MerchantName",
                            "EstateName",
                            "SettlementSchedule"});
                table62.AddRow(new string[] {
                            "Test Merchant 2",
                            "Test Estate 1",
                            "Immediate"});
                table62.AddRow(new string[] {
                            "Test Merchant 3",
                            "Test Estate 1",
                            "Weekly"});
                table62.AddRow(new string[] {
                            "Test Merchant 4",
                            "Test Estate 1",
                            "Monthly"});
#line 124
 await testRunner.WhenAsync("I set the merchants settlement schedule", ((string)(null)), table62, "When ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Get Merchants for Estate")]
        [Xunit.TraitAttribute("FeatureTitle", "Merchant")]
        [Xunit.TraitAttribute("Description", "Get Merchants for Estate")]
        [Xunit.TraitAttribute("Category", "PRTest")]
        public async System.Threading.Tasks.Task GetMerchantsForEstate()
        {
            string[] tagsOfScenario = new string[] {
                    "PRTest"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            Reqnroll.ScenarioInfo scenarioInfo = new Reqnroll.ScenarioInfo("Get Merchants for Estate", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 131
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 4
await this.FeatureBackgroundAsync();
#line hidden
                Reqnroll.Table table63 = new Reqnroll.Table(new string[] {
                            "MerchantName",
                            "AddressLine1",
                            "Town",
                            "Region",
                            "Country",
                            "ContactName",
                            "EmailAddress",
                            "EstateName"});
                table63.AddRow(new string[] {
                            "Test Merchant 1",
                            "Address Line 1",
                            "TestTown",
                            "Test Region",
                            "United Kingdom",
                            "Test Contact 1",
                            "testcontact1@merchant1.co.uk",
                            "Test Estate 1"});
                table63.AddRow(new string[] {
                            "Test Merchant 2",
                            "Address Line 1",
                            "TestTown",
                            "Test Region",
                            "United Kingdom",
                            "Test Contact 1",
                            "testcontact1@merchant2.co.uk",
                            "Test Estate 1"});
                table63.AddRow(new string[] {
                            "Test Merchant 3",
                            "Address Line 1",
                            "TestTown",
                            "Test Region",
                            "United Kingdom",
                            "Test Contact 1",
                            "testcontact1@merchant3.co.uk",
                            "Test Estate 1"});
                table63.AddRow(new string[] {
                            "Test Merchant 4",
                            "Address Line 1",
                            "TestTown",
                            "Test Region",
                            "United Kingdom",
                            "Test Contact 1",
                            "testcontact1@merchant4.co.uk",
                            "Test Estate 2"});
                table63.AddRow(new string[] {
                            "Test Merchant 5",
                            "Address Line 1",
                            "TestTown",
                            "Test Region",
                            "United Kingdom",
                            "Test Contact 1",
                            "testcontact1@merchant5.co.uk",
                            "Test Estate 2"});
#line 132
 await testRunner.GivenAsync("I create the following merchants", ((string)(null)), table63, "Given ");
#line hidden
                Reqnroll.Table table64 = new Reqnroll.Table(new string[] {
                            "OperatorName",
                            "MerchantName",
                            "MerchantNumber",
                            "TerminalNumber",
                            "EstateName"});
                table64.AddRow(new string[] {
                            "Test Operator 1",
                            "Test Merchant 1",
                            "00000001",
                            "10000001",
                            "Test Estate 1"});
                table64.AddRow(new string[] {
                            "Test Operator 1",
                            "Test Merchant 2",
                            "00000001",
                            "10000001",
                            "Test Estate 1"});
                table64.AddRow(new string[] {
                            "Test Operator 1",
                            "Test Merchant 3",
                            "00000001",
                            "10000001",
                            "Test Estate 1"});
                table64.AddRow(new string[] {
                            "Test Operator 1",
                            "Test Merchant 4",
                            "00000001",
                            "10000001",
                            "Test Estate 2"});
                table64.AddRow(new string[] {
                            "Test Operator 1",
                            "Test Merchant 5",
                            "00000001",
                            "10000001",
                            "Test Estate 2"});
#line 140
 await testRunner.WhenAsync("I assign the following operator to the merchants", ((string)(null)), table64, "When ");
#line hidden
                Reqnroll.Table table65 = new Reqnroll.Table(new string[] {
                            "DeviceIdentifier",
                            "MerchantName",
                            "EstateName"});
                table65.AddRow(new string[] {
                            "TestDevice1",
                            "Test Merchant 1",
                            "Test Estate 1"});
                table65.AddRow(new string[] {
                            "TestDevice2",
                            "Test Merchant 2",
                            "Test Estate 1"});
                table65.AddRow(new string[] {
                            "TestDevice3",
                            "Test Merchant 3",
                            "Test Estate 1"});
                table65.AddRow(new string[] {
                            "TestDevice4",
                            "Test Merchant 4",
                            "Test Estate 2"});
                table65.AddRow(new string[] {
                            "TestDevice5",
                            "Test Merchant 5",
                            "Test Estate 2"});
#line 148
 await testRunner.WhenAsync("I add the following devices to the merchant", ((string)(null)), table65, "When ");
#line hidden
                Reqnroll.Table table66 = new Reqnroll.Table(new string[] {
                            "EmailAddress",
                            "Password",
                            "GivenName",
                            "FamilyName",
                            "MerchantName",
                            "EstateName"});
                table66.AddRow(new string[] {
                            "merchantuser1@testmerchant1.co.uk",
                            "123456",
                            "TestMerchant",
                            "User1",
                            "Test Merchant 1",
                            "Test Estate 1"});
                table66.AddRow(new string[] {
                            "merchantuser1@testmerchant2.co.uk",
                            "123456",
                            "TestMerchant",
                            "User1",
                            "Test Merchant 2",
                            "Test Estate 1"});
                table66.AddRow(new string[] {
                            "merchantuser1@testmerchant3.co.uk",
                            "123456",
                            "TestMerchant",
                            "User1",
                            "Test Merchant 3",
                            "Test Estate 1"});
                table66.AddRow(new string[] {
                            "merchantuser1@testmerchant4.co.uk",
                            "123456",
                            "TestMerchant",
                            "User1",
                            "Test Merchant 4",
                            "Test Estate 2"});
                table66.AddRow(new string[] {
                            "merchantuser1@testmerchant5.co.uk",
                            "123456",
                            "TestMerchant",
                            "User1",
                            "Test Merchant 5",
                            "Test Estate 2"});
#line 156
 await testRunner.WhenAsync("I create the following security users", ((string)(null)), table66, "When ");
#line hidden
#line 164
 await testRunner.WhenAsync("I get the merchants for \'Test Estate 1\' then 3 merchants will be returned", ((string)(null)), ((Reqnroll.Table)(null)), "When ");
#line hidden
#line 166
 await testRunner.WhenAsync("I get the merchants for \'Test Estate 2\' then 2 merchants will be returned", ((string)(null)), ((Reqnroll.Table)(null)), "When ");
#line hidden
#line 168
 await testRunner.GivenAsync("I am logged in as \"estateuser1@testestate1.co.uk\" with password \"123456\" for Esta" +
                        "te \"Test Estate 1\" with client \"estateClient\"", ((string)(null)), ((Reqnroll.Table)(null)), "Given ");
#line hidden
#line 170
 await testRunner.WhenAsync("I get the merchants for \'Test Estate 1\' then 3 merchants will be returned", ((string)(null)), ((Reqnroll.Table)(null)), "When ");
#line hidden
#line 172
 await testRunner.GivenAsync("I am logged in as \"estateuser1@testestate2.co.uk\" with password \"123456\" for Esta" +
                        "te \"Test Estate 2\" with client \"estateClient\"", ((string)(null)), ((Reqnroll.Table)(null)), "Given ");
#line hidden
#line 174
 await testRunner.WhenAsync("I get the merchants for \'Test Estate 2\' then 2 merchants will be returned", ((string)(null)), ((Reqnroll.Table)(null)), "When ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Update Merchant")]
        [Xunit.TraitAttribute("FeatureTitle", "Merchant")]
        [Xunit.TraitAttribute("Description", "Update Merchant")]
        public async System.Threading.Tasks.Task UpdateMerchant()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            Reqnroll.ScenarioInfo scenarioInfo = new Reqnroll.ScenarioInfo("Update Merchant", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 176
 this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 4
await this.FeatureBackgroundAsync();
#line hidden
                Reqnroll.Table table67 = new Reqnroll.Table(new string[] {
                            "MerchantName",
                            "AddressLine1",
                            "Town",
                            "Region",
                            "Country",
                            "ContactName",
                            "EmailAddress",
                            "EstateName",
                            "SettlementSchedule"});
                table67.AddRow(new string[] {
                            "Test Merchant 1",
                            "Address Line 1",
                            "TestTown",
                            "Test Region",
                            "United Kingdom",
                            "Test Contact 1",
                            "testcontact1@merchant1.co.uk",
                            "Test Estate 1",
                            "Weekly"});
#line 177
 await testRunner.WhenAsync("I create the following merchants", ((string)(null)), table67, "When ");
#line hidden
                Reqnroll.Table table68 = new Reqnroll.Table(new string[] {
                            "OperatorName",
                            "MerchantName",
                            "MerchantNumber",
                            "TerminalNumber",
                            "EstateName"});
                table68.AddRow(new string[] {
                            "Test Operator 1",
                            "Test Merchant 1",
                            "00000001",
                            "10000001",
                            "Test Estate 1"});
#line 180
 await testRunner.WhenAsync("I assign the following operator to the merchants", ((string)(null)), table68, "When ");
#line hidden
                Reqnroll.Table table69 = new Reqnroll.Table(new string[] {
                            "EmailAddress",
                            "Password",
                            "GivenName",
                            "FamilyName",
                            "MerchantName",
                            "EstateName"});
                table69.AddRow(new string[] {
                            "merchantuser1@testmerchant1.co.uk",
                            "123456",
                            "TestMerchant",
                            "User1",
                            "Test Merchant 1",
                            "Test Estate 1"});
#line 183
 await testRunner.WhenAsync("I create the following security users", ((string)(null)), table69, "When ");
#line hidden
                Reqnroll.Table table70 = new Reqnroll.Table(new string[] {
                            "DeviceIdentifier",
                            "MerchantName",
                            "EstateName"});
                table70.AddRow(new string[] {
                            "TestDevice1",
                            "Test Merchant 1",
                            "Test Estate 1"});
#line 186
 await testRunner.WhenAsync("I add the following devices to the merchant", ((string)(null)), table70, "When ");
#line hidden
                Reqnroll.Table table71 = new Reqnroll.Table(new string[] {
                            "UpdateMerchantName",
                            "SettlementSchedule",
                            "EstateName",
                            "MerchantName"});
                table71.AddRow(new string[] {
                            "Update Merchant 1",
                            "Monthly",
                            "Test Estate 1",
                            "Test Merchant 1"});
#line 189
 await testRunner.WhenAsync("I update the merchants with the following details", ((string)(null)), table71, "When ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("Reqnroll", "1.0.0.0")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : object, Xunit.IAsyncLifetime
        {
            
            async System.Threading.Tasks.Task Xunit.IAsyncLifetime.InitializeAsync()
            {
                await MerchantFeature.FeatureSetupAsync();
            }
            
            async System.Threading.Tasks.Task Xunit.IAsyncLifetime.DisposeAsync()
            {
                await MerchantFeature.FeatureTearDownAsync();
            }
        }
    }
}
#pragma warning restore
#endregion
