// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by Reqnroll (https://www.reqnroll.net/).
//      Reqnroll Version:1.0.0.0
//      Reqnroll Generator Version:1.0.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace EstateManagement.IntegrationTests.Features
{
    using Reqnroll;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Reqnroll", "1.0.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("Merchant")]
    [NUnit.Framework.CategoryAttribute("base")]
    [NUnit.Framework.CategoryAttribute("shared")]
    public partial class MerchantFeature
    {
        
        private Reqnroll.ITestRunner testRunner;
        
        private static string[] featureTags = new string[] {
                "base",
                "shared"};
        
#line 1 "Merchant.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual async System.Threading.Tasks.Task FeatureSetupAsync()
        {
            testRunner = Reqnroll.TestRunnerManager.GetTestRunnerForAssembly(null, NUnit.Framework.TestContext.CurrentContext.WorkerId);
            Reqnroll.FeatureInfo featureInfo = new Reqnroll.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features", "Merchant", null, ProgrammingLanguage.CSharp, featureTags);
            await testRunner.OnFeatureStartAsync(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual async System.Threading.Tasks.Task FeatureTearDownAsync()
        {
            await testRunner.OnFeatureEndAsync();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public async System.Threading.Tasks.Task TestInitializeAsync()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public async System.Threading.Tasks.Task TestTearDownAsync()
        {
            await testRunner.OnScenarioEndAsync();
        }
        
        public void ScenarioInitialize(Reqnroll.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public async System.Threading.Tasks.Task ScenarioStartAsync()
        {
            await testRunner.OnScenarioStartAsync();
        }
        
        public async System.Threading.Tasks.Task ScenarioCleanupAsync()
        {
            await testRunner.CollectScenarioErrorsAsync();
        }
        
        public virtual async System.Threading.Tasks.Task FeatureBackgroundAsync()
        {
#line 4
#line hidden
            Reqnroll.Table table44 = new Reqnroll.Table(new string[] {
                        "Role Name"});
            table44.AddRow(new string[] {
                        "Estate"});
            table44.AddRow(new string[] {
                        "Merchant"});
#line 6
 await testRunner.GivenAsync("the following security roles exist", ((string)(null)), table44, "Given ");
#line hidden
            Reqnroll.Table table45 = new Reqnroll.Table(new string[] {
                        "Name",
                        "DisplayName",
                        "Description"});
            table45.AddRow(new string[] {
                        "estateManagement",
                        "Estate Managememt REST Scope",
                        "A scope for Estate Managememt REST"});
#line 11
 await testRunner.GivenAsync("I create the following api scopes", ((string)(null)), table45, "Given ");
#line hidden
            Reqnroll.Table table46 = new Reqnroll.Table(new string[] {
                        "Name",
                        "DisplayName",
                        "Secret",
                        "Scopes",
                        "UserClaims"});
            table46.AddRow(new string[] {
                        "estateManagement",
                        "Estate Managememt REST",
                        "Secret1",
                        "estateManagement",
                        "merchantId, estateId, role"});
#line 15
 await testRunner.GivenAsync("the following api resources exist", ((string)(null)), table46, "Given ");
#line hidden
            Reqnroll.Table table47 = new Reqnroll.Table(new string[] {
                        "ClientId",
                        "ClientName",
                        "Secret",
                        "Scopes",
                        "GrantTypes"});
            table47.AddRow(new string[] {
                        "serviceClient",
                        "Service Client",
                        "Secret1",
                        "estateManagement",
                        "client_credentials"});
            table47.AddRow(new string[] {
                        "estateClient",
                        "Estate Client",
                        "Secret1",
                        "estateManagement",
                        "password"});
#line 19
 await testRunner.GivenAsync("the following clients exist", ((string)(null)), table47, "Given ");
#line hidden
            Reqnroll.Table table48 = new Reqnroll.Table(new string[] {
                        "ClientId"});
            table48.AddRow(new string[] {
                        "serviceClient"});
#line 24
 await testRunner.GivenAsync("I have a token to access the estate management resource", ((string)(null)), table48, "Given ");
#line hidden
            Reqnroll.Table table49 = new Reqnroll.Table(new string[] {
                        "EstateName"});
            table49.AddRow(new string[] {
                        "Test Estate 1"});
            table49.AddRow(new string[] {
                        "Test Estate 2"});
#line 28
 await testRunner.GivenAsync("I have created the following estates", ((string)(null)), table49, "Given ");
#line hidden
            Reqnroll.Table table50 = new Reqnroll.Table(new string[] {
                        "EstateName",
                        "OperatorName",
                        "RequireCustomMerchantNumber",
                        "RequireCustomTerminalNumber"});
            table50.AddRow(new string[] {
                        "Test Estate 1",
                        "Test Operator 1",
                        "True",
                        "True"});
            table50.AddRow(new string[] {
                        "Test Estate 2",
                        "Test Operator 1",
                        "True",
                        "True"});
#line 33
 await testRunner.GivenAsync("I have created the following operators", ((string)(null)), table50, "Given ");
#line hidden
            Reqnroll.Table table51 = new Reqnroll.Table(new string[] {
                        "EstateName",
                        "OperatorName"});
            table51.AddRow(new string[] {
                        "Test Estate 1",
                        "Test Operator 1"});
            table51.AddRow(new string[] {
                        "Test Estate 2",
                        "Test Operator 1"});
#line 38
 await testRunner.AndAsync("I have assigned the following operators to the estates", ((string)(null)), table51, "And ");
#line hidden
            Reqnroll.Table table52 = new Reqnroll.Table(new string[] {
                        "EstateName",
                        "OperatorName",
                        "ContractDescription"});
            table52.AddRow(new string[] {
                        "Test Estate 1",
                        "Test Operator 1",
                        "Safaricom Contract"});
#line 43
 await testRunner.GivenAsync("I create a contract with the following values", ((string)(null)), table52, "Given ");
#line hidden
            Reqnroll.Table table53 = new Reqnroll.Table(new string[] {
                        "EmailAddress",
                        "Password",
                        "GivenName",
                        "FamilyName",
                        "EstateName"});
            table53.AddRow(new string[] {
                        "estateuser1@testestate1.co.uk",
                        "123456",
                        "TestEstate",
                        "User1",
                        "Test Estate 1"});
            table53.AddRow(new string[] {
                        "estateuser1@testestate2.co.uk",
                        "123456",
                        "TestEstate",
                        "User1",
                        "Test Estate 2"});
#line 47
 await testRunner.GivenAsync("I have created the following security users", ((string)(null)), table53, "Given ");
#line hidden
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Get Invalid Merchant - System Login")]
        public async System.Threading.Tasks.Task GetInvalidMerchant_SystemLogin()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            Reqnroll.ScenarioInfo scenarioInfo = new Reqnroll.ScenarioInfo("Get Invalid Merchant - System Login", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 52
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 4
await this.FeatureBackgroundAsync();
#line hidden
#line 53
 await testRunner.WhenAsync("I get the merchant \"Test Merchant 1\" for estate \"Test Estate 1\" an error is retur" +
                        "ned", ((string)(null)), ((Reqnroll.Table)(null)), "When ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Get Invalid Merchant - Estate User")]
        public async System.Threading.Tasks.Task GetInvalidMerchant_EstateUser()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            Reqnroll.ScenarioInfo scenarioInfo = new Reqnroll.ScenarioInfo("Get Invalid Merchant - Estate User", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 55
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 4
await this.FeatureBackgroundAsync();
#line hidden
#line 56
 await testRunner.GivenAsync("I am logged in as \"estateuser1@testestate1.co.uk\" with password \"123456\" for Esta" +
                        "te \"Test Estate 1\" with client \"estateClient\"", ((string)(null)), ((Reqnroll.Table)(null)), "Given ");
#line hidden
#line 57
 await testRunner.WhenAsync("I get the merchant \"Test Merchant 1\" for estate \"Test Estate 1\" an error is retur" +
                        "ned", ((string)(null)), ((Reqnroll.Table)(null)), "When ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Create Merchant - System Login")]
        public async System.Threading.Tasks.Task CreateMerchant_SystemLogin()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            Reqnroll.ScenarioInfo scenarioInfo = new Reqnroll.ScenarioInfo("Create Merchant - System Login", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 59
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 4
await this.FeatureBackgroundAsync();
#line hidden
                Reqnroll.Table table54 = new Reqnroll.Table(new string[] {
                            "MerchantName",
                            "AddressLine1",
                            "Town",
                            "Region",
                            "Country",
                            "ContactName",
                            "EmailAddress",
                            "EstateName",
                            "SettlementSchedule"});
                table54.AddRow(new string[] {
                            "Test Merchant 1",
                            "Address Line 1",
                            "TestTown",
                            "Test Region",
                            "United Kingdom",
                            "Test Contact 1",
                            "testcontact1@merchant1.co.uk",
                            "Test Estate 1",
                            "Weekly"});
#line 60
 await testRunner.WhenAsync("I create the following merchants", ((string)(null)), table54, "When ");
#line hidden
                Reqnroll.Table table55 = new Reqnroll.Table(new string[] {
                            "OperatorName",
                            "MerchantName",
                            "MerchantNumber",
                            "TerminalNumber",
                            "EstateName"});
                table55.AddRow(new string[] {
                            "Test Operator 1",
                            "Test Merchant 1",
                            "00000001",
                            "10000001",
                            "Test Estate 1"});
#line 63
 await testRunner.WhenAsync("I assign the following operator to the merchants", ((string)(null)), table55, "When ");
#line hidden
                Reqnroll.Table table56 = new Reqnroll.Table(new string[] {
                            "EmailAddress",
                            "Password",
                            "GivenName",
                            "FamilyName",
                            "MerchantName",
                            "EstateName"});
                table56.AddRow(new string[] {
                            "merchantuser1@testmerchant1.co.uk",
                            "123456",
                            "TestMerchant",
                            "User1",
                            "Test Merchant 1",
                            "Test Estate 1"});
#line 66
 await testRunner.WhenAsync("I create the following security users", ((string)(null)), table56, "When ");
#line hidden
                Reqnroll.Table table57 = new Reqnroll.Table(new string[] {
                            "DeviceIdentifier",
                            "MerchantName",
                            "EstateName"});
                table57.AddRow(new string[] {
                            "TestDevice1",
                            "Test Merchant 1",
                            "Test Estate 1"});
#line 69
 await testRunner.WhenAsync("I add the following devices to the merchant", ((string)(null)), table57, "When ");
#line hidden
                Reqnroll.Table table58 = new Reqnroll.Table(new string[] {
                            "OriginalDeviceIdentifier",
                            "NewDeviceIdentifier",
                            "MerchantName",
                            "EstateName"});
                table58.AddRow(new string[] {
                            "TestDevice1",
                            "TestDevice2",
                            "Test Merchant 1",
                            "Test Estate 1"});
#line 72
 await testRunner.WhenAsync("I swap the merchant device the device is swapped", ((string)(null)), table58, "When ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Create Merchant - Estate User")]
        public async System.Threading.Tasks.Task CreateMerchant_EstateUser()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            Reqnroll.ScenarioInfo scenarioInfo = new Reqnroll.ScenarioInfo("Create Merchant - Estate User", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 76
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 4
await this.FeatureBackgroundAsync();
#line hidden
#line 77
 await testRunner.GivenAsync("I am logged in as \"estateuser1@testestate1.co.uk\" with password \"123456\" for Esta" +
                        "te \"Test Estate 1\" with client \"estateClient\"", ((string)(null)), ((Reqnroll.Table)(null)), "Given ");
#line hidden
                Reqnroll.Table table59 = new Reqnroll.Table(new string[] {
                            "MerchantName",
                            "AddressLine1",
                            "Town",
                            "Region",
                            "Country",
                            "ContactName",
                            "EmailAddress",
                            "EstateName",
                            "SettlementSchedule"});
                table59.AddRow(new string[] {
                            "Test Merchant 1",
                            "Address Line 1",
                            "TestTown",
                            "Test Region",
                            "United Kingdom",
                            "Test Contact 1",
                            "testcontact1@merchant1.co.uk",
                            "Test Estate 1",
                            "Weekly"});
#line 78
 await testRunner.WhenAsync("I create the following merchants", ((string)(null)), table59, "When ");
#line hidden
                Reqnroll.Table table60 = new Reqnroll.Table(new string[] {
                            "OperatorName",
                            "MerchantName",
                            "MerchantNumber",
                            "TerminalNumber",
                            "EstateName"});
                table60.AddRow(new string[] {
                            "Test Operator 1",
                            "Test Merchant 1",
                            "00000001",
                            "10000001",
                            "Test Estate 1"});
#line 81
 await testRunner.WhenAsync("I assign the following operator to the merchants", ((string)(null)), table60, "When ");
#line hidden
                Reqnroll.Table table61 = new Reqnroll.Table(new string[] {
                            "EmailAddress",
                            "Password",
                            "GivenName",
                            "FamilyName",
                            "MerchantName",
                            "EstateName"});
                table61.AddRow(new string[] {
                            "merchantuser1@testmerchant1.co.uk",
                            "123456",
                            "TestMerchant",
                            "User1",
                            "Test Merchant 1",
                            "Test Estate 1"});
#line 84
 await testRunner.WhenAsync("I create the following security users", ((string)(null)), table61, "When ");
#line hidden
                Reqnroll.Table table62 = new Reqnroll.Table(new string[] {
                            "DeviceIdentifier",
                            "MerchantName",
                            "EstateName"});
                table62.AddRow(new string[] {
                            "TestDevice1",
                            "Test Merchant 1",
                            "Test Estate 1"});
#line 87
 await testRunner.WhenAsync("I add the following devices to the merchant", ((string)(null)), table62, "When ");
#line hidden
                Reqnroll.Table table63 = new Reqnroll.Table(new string[] {
                            "OriginalDeviceIdentifier",
                            "NewDeviceIdentifier",
                            "MerchantName",
                            "EstateName"});
                table63.AddRow(new string[] {
                            "TestDevice1",
                            "TestDevice2",
                            "Test Merchant 1",
                            "Test Estate 1"});
#line 90
 await testRunner.WhenAsync("I swap the merchant device the device is swapped", ((string)(null)), table63, "When ");
#line hidden
                Reqnroll.Table table64 = new Reqnroll.Table(new string[] {
                            "Reference",
                            "Amount",
                            "DateTime",
                            "MerchantName",
                            "EstateName"});
                table64.AddRow(new string[] {
                            "Deposit1",
                            "500.00",
                            "LastMonth",
                            "Test Merchant 1",
                            "Test Estate 1"});
                table64.AddRow(new string[] {
                            "Deposit2",
                            "1000.00",
                            "LastWeek",
                            "Test Merchant 1",
                            "Test Estate 1"});
                table64.AddRow(new string[] {
                            "Deposit3",
                            "1000.00",
                            "Yesterday",
                            "Test Merchant 1",
                            "Test Estate 1"});
                table64.AddRow(new string[] {
                            "Deposit4",
                            "400.00",
                            "Today",
                            "Test Merchant 1",
                            "Test Estate 1"});
#line 93
 await testRunner.WhenAsync("I make the following manual merchant deposits", ((string)(null)), table64, "When ");
#line hidden
                Reqnroll.Table table65 = new Reqnroll.Table(new string[] {
                            "Amount",
                            "DateTime",
                            "MerchantName",
                            "EstateName"});
                table65.AddRow(new string[] {
                            "400.00",
                            "LastMonth",
                            "Test Merchant 1",
                            "Test Estate 1"});
#line 100
 await testRunner.WhenAsync("I make the following merchant withdrawals", ((string)(null)), table65, "When ");
#line hidden
                Reqnroll.Table table66 = new Reqnroll.Table(new string[] {
                            "Amount",
                            "DateTime",
                            "MerchantName",
                            "EstateName"});
                table66.AddRow(new string[] {
                            "500.00",
                            "LastMonth",
                            "Test Merchant 1",
                            "Test Estate 1"});
                table66.AddRow(new string[] {
                            "1000.00",
                            "LastWeek",
                            "Test Merchant 1",
                            "Test Estate 1"});
                table66.AddRow(new string[] {
                            "1000.00",
                            "Yesterday",
                            "Test Merchant 1",
                            "Test Estate 1"});
                table66.AddRow(new string[] {
                            "400.00",
                            "Today",
                            "Test Merchant 1",
                            "Test Estate 1"});
#line 104
 await testRunner.WhenAsync("I make the following automatic merchant deposits", ((string)(null)), table66, "When ");
#line hidden
                Reqnroll.Table table67 = new Reqnroll.Table(new string[] {
                            "Amount",
                            "DateTime",
                            "MerchantName",
                            "EstateName"});
                table67.AddRow(new string[] {
                            "0",
                            "LastMonth",
                            "Test Merchant 1",
                            "Test Estate 1"});
#line 111
 await testRunner.WhenAsync("I make the following manual merchant deposits the deposit is rejected", ((string)(null)), table67, "When ");
#line hidden
                Reqnroll.Table table68 = new Reqnroll.Table(new string[] {
                            "Amount",
                            "DateTime",
                            "MerchantName",
                            "EstateName"});
                table68.AddRow(new string[] {
                            "-100",
                            "LastMonth",
                            "Test Merchant 1",
                            "Test Estate 1"});
#line 115
 await testRunner.WhenAsync("I make the following manual merchant deposits the deposit is rejected", ((string)(null)), table68, "When ");
#line hidden
                Reqnroll.Table table69 = new Reqnroll.Table(new string[] {
                            "Amount",
                            "DateTime",
                            "MerchantName",
                            "EstateName"});
                table69.AddRow(new string[] {
                            "0",
                            "LastMonth",
                            "Test Merchant 1",
                            "Test Estate 1"});
#line 119
 await testRunner.WhenAsync("I make the following automatic merchant deposits the deposit is rejected", ((string)(null)), table69, "When ");
#line hidden
                Reqnroll.Table table70 = new Reqnroll.Table(new string[] {
                            "Amount",
                            "DateTime",
                            "MerchantName",
                            "EstateName"});
                table70.AddRow(new string[] {
                            "-100",
                            "LastMonth",
                            "Test Merchant 1",
                            "Test Estate 1"});
#line 123
 await testRunner.WhenAsync("I make the following automatic merchant deposits the deposit is rejected", ((string)(null)), table70, "When ");
#line hidden
                Reqnroll.Table table71 = new Reqnroll.Table(new string[] {
                            "MerchantName",
                            "AddressLine1",
                            "Town",
                            "Region",
                            "Country",
                            "ContactName",
                            "EmailAddress",
                            "EstateName"});
                table71.AddRow(new string[] {
                            "Test Merchant 2",
                            "Address Line 1",
                            "TestTown",
                            "Test Region",
                            "United Kingdom",
                            "Test Contact 1",
                            "testcontact1@merchant1.co.uk",
                            "Test Estate 1"});
                table71.AddRow(new string[] {
                            "Test Merchant 3",
                            "Address Line 1",
                            "TestTown",
                            "Test Region",
                            "United Kingdom",
                            "Test Contact 1",
                            "testcontact1@merchant1.co.uk",
                            "Test Estate 1"});
                table71.AddRow(new string[] {
                            "Test Merchant 4",
                            "Address Line 1",
                            "TestTown",
                            "Test Region",
                            "United Kingdom",
                            "Test Contact 1",
                            "testcontact1@merchant1.co.uk",
                            "Test Estate 1"});
#line 127
 await testRunner.GivenAsync("I create the following merchants", ((string)(null)), table71, "Given ");
#line hidden
                Reqnroll.Table table72 = new Reqnroll.Table(new string[] {
                            "MerchantName",
                            "EstateName",
                            "SettlementSchedule"});
                table72.AddRow(new string[] {
                            "Test Merchant 2",
                            "Test Estate 1",
                            "Immediate"});
                table72.AddRow(new string[] {
                            "Test Merchant 3",
                            "Test Estate 1",
                            "Weekly"});
                table72.AddRow(new string[] {
                            "Test Merchant 4",
                            "Test Estate 1",
                            "Monthly"});
#line 133
 await testRunner.WhenAsync("I set the merchants settlement schedule", ((string)(null)), table72, "When ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Get Merchants for Estate")]
        [NUnit.Framework.CategoryAttribute("PRTest")]
        public async System.Threading.Tasks.Task GetMerchantsForEstate()
        {
            string[] tagsOfScenario = new string[] {
                    "PRTest"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            Reqnroll.ScenarioInfo scenarioInfo = new Reqnroll.ScenarioInfo("Get Merchants for Estate", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 140
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 4
await this.FeatureBackgroundAsync();
#line hidden
                Reqnroll.Table table73 = new Reqnroll.Table(new string[] {
                            "MerchantName",
                            "AddressLine1",
                            "Town",
                            "Region",
                            "Country",
                            "ContactName",
                            "EmailAddress",
                            "EstateName"});
                table73.AddRow(new string[] {
                            "Test Merchant 1",
                            "Address Line 1",
                            "TestTown",
                            "Test Region",
                            "United Kingdom",
                            "Test Contact 1",
                            "testcontact1@merchant1.co.uk",
                            "Test Estate 1"});
                table73.AddRow(new string[] {
                            "Test Merchant 2",
                            "Address Line 1",
                            "TestTown",
                            "Test Region",
                            "United Kingdom",
                            "Test Contact 1",
                            "testcontact1@merchant2.co.uk",
                            "Test Estate 1"});
                table73.AddRow(new string[] {
                            "Test Merchant 3",
                            "Address Line 1",
                            "TestTown",
                            "Test Region",
                            "United Kingdom",
                            "Test Contact 1",
                            "testcontact1@merchant3.co.uk",
                            "Test Estate 1"});
                table73.AddRow(new string[] {
                            "Test Merchant 4",
                            "Address Line 1",
                            "TestTown",
                            "Test Region",
                            "United Kingdom",
                            "Test Contact 1",
                            "testcontact1@merchant4.co.uk",
                            "Test Estate 2"});
                table73.AddRow(new string[] {
                            "Test Merchant 5",
                            "Address Line 1",
                            "TestTown",
                            "Test Region",
                            "United Kingdom",
                            "Test Contact 1",
                            "testcontact1@merchant5.co.uk",
                            "Test Estate 2"});
#line 141
 await testRunner.GivenAsync("I create the following merchants", ((string)(null)), table73, "Given ");
#line hidden
                Reqnroll.Table table74 = new Reqnroll.Table(new string[] {
                            "OperatorName",
                            "MerchantName",
                            "MerchantNumber",
                            "TerminalNumber",
                            "EstateName"});
                table74.AddRow(new string[] {
                            "Test Operator 1",
                            "Test Merchant 1",
                            "00000001",
                            "10000001",
                            "Test Estate 1"});
                table74.AddRow(new string[] {
                            "Test Operator 1",
                            "Test Merchant 2",
                            "00000001",
                            "10000001",
                            "Test Estate 1"});
                table74.AddRow(new string[] {
                            "Test Operator 1",
                            "Test Merchant 3",
                            "00000001",
                            "10000001",
                            "Test Estate 1"});
                table74.AddRow(new string[] {
                            "Test Operator 1",
                            "Test Merchant 4",
                            "00000001",
                            "10000001",
                            "Test Estate 2"});
                table74.AddRow(new string[] {
                            "Test Operator 1",
                            "Test Merchant 5",
                            "00000001",
                            "10000001",
                            "Test Estate 2"});
#line 149
 await testRunner.WhenAsync("I assign the following operator to the merchants", ((string)(null)), table74, "When ");
#line hidden
                Reqnroll.Table table75 = new Reqnroll.Table(new string[] {
                            "DeviceIdentifier",
                            "MerchantName",
                            "EstateName"});
                table75.AddRow(new string[] {
                            "TestDevice1",
                            "Test Merchant 1",
                            "Test Estate 1"});
                table75.AddRow(new string[] {
                            "TestDevice2",
                            "Test Merchant 2",
                            "Test Estate 1"});
                table75.AddRow(new string[] {
                            "TestDevice3",
                            "Test Merchant 3",
                            "Test Estate 1"});
                table75.AddRow(new string[] {
                            "TestDevice4",
                            "Test Merchant 4",
                            "Test Estate 2"});
                table75.AddRow(new string[] {
                            "TestDevice5",
                            "Test Merchant 5",
                            "Test Estate 2"});
#line 157
 await testRunner.WhenAsync("I add the following devices to the merchant", ((string)(null)), table75, "When ");
#line hidden
                Reqnroll.Table table76 = new Reqnroll.Table(new string[] {
                            "EmailAddress",
                            "Password",
                            "GivenName",
                            "FamilyName",
                            "MerchantName",
                            "EstateName"});
                table76.AddRow(new string[] {
                            "merchantuser1@testmerchant1.co.uk",
                            "123456",
                            "TestMerchant",
                            "User1",
                            "Test Merchant 1",
                            "Test Estate 1"});
                table76.AddRow(new string[] {
                            "merchantuser1@testmerchant2.co.uk",
                            "123456",
                            "TestMerchant",
                            "User1",
                            "Test Merchant 2",
                            "Test Estate 1"});
                table76.AddRow(new string[] {
                            "merchantuser1@testmerchant3.co.uk",
                            "123456",
                            "TestMerchant",
                            "User1",
                            "Test Merchant 3",
                            "Test Estate 1"});
                table76.AddRow(new string[] {
                            "merchantuser1@testmerchant4.co.uk",
                            "123456",
                            "TestMerchant",
                            "User1",
                            "Test Merchant 4",
                            "Test Estate 2"});
                table76.AddRow(new string[] {
                            "merchantuser1@testmerchant5.co.uk",
                            "123456",
                            "TestMerchant",
                            "User1",
                            "Test Merchant 5",
                            "Test Estate 2"});
#line 165
 await testRunner.WhenAsync("I create the following security users", ((string)(null)), table76, "When ");
#line hidden
#line 173
 await testRunner.WhenAsync("I get the merchants for \'Test Estate 1\' then 3 merchants will be returned", ((string)(null)), ((Reqnroll.Table)(null)), "When ");
#line hidden
#line 175
 await testRunner.WhenAsync("I get the merchants for \'Test Estate 2\' then 2 merchants will be returned", ((string)(null)), ((Reqnroll.Table)(null)), "When ");
#line hidden
#line 177
 await testRunner.GivenAsync("I am logged in as \"estateuser1@testestate1.co.uk\" with password \"123456\" for Esta" +
                        "te \"Test Estate 1\" with client \"estateClient\"", ((string)(null)), ((Reqnroll.Table)(null)), "Given ");
#line hidden
#line 179
 await testRunner.WhenAsync("I get the merchants for \'Test Estate 1\' then 3 merchants will be returned", ((string)(null)), ((Reqnroll.Table)(null)), "When ");
#line hidden
#line 181
 await testRunner.GivenAsync("I am logged in as \"estateuser1@testestate2.co.uk\" with password \"123456\" for Esta" +
                        "te \"Test Estate 2\" with client \"estateClient\"", ((string)(null)), ((Reqnroll.Table)(null)), "Given ");
#line hidden
#line 183
 await testRunner.WhenAsync("I get the merchants for \'Test Estate 2\' then 2 merchants will be returned", ((string)(null)), ((Reqnroll.Table)(null)), "When ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Update Merchant")]
        [NUnit.Framework.CategoryAttribute("PRTest")]
        public async System.Threading.Tasks.Task UpdateMerchant()
        {
            string[] tagsOfScenario = new string[] {
                    "PRTest"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            Reqnroll.ScenarioInfo scenarioInfo = new Reqnroll.ScenarioInfo("Update Merchant", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 186
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 4
await this.FeatureBackgroundAsync();
#line hidden
                Reqnroll.Table table77 = new Reqnroll.Table(new string[] {
                            "MerchantName",
                            "AddressLine1",
                            "Town",
                            "Region",
                            "Country",
                            "ContactName",
                            "EmailAddress",
                            "EstateName",
                            "SettlementSchedule"});
                table77.AddRow(new string[] {
                            "Test Merchant 1",
                            "Address Line 1",
                            "TestTown",
                            "Test Region",
                            "United Kingdom",
                            "Test Contact 1",
                            "testcontact1@merchant1.co.uk",
                            "Test Estate 1",
                            "Weekly"});
#line 187
 await testRunner.WhenAsync("I create the following merchants", ((string)(null)), table77, "When ");
#line hidden
                Reqnroll.Table table78 = new Reqnroll.Table(new string[] {
                            "OperatorName",
                            "MerchantName",
                            "MerchantNumber",
                            "TerminalNumber",
                            "EstateName"});
                table78.AddRow(new string[] {
                            "Test Operator 1",
                            "Test Merchant 1",
                            "00000001",
                            "10000001",
                            "Test Estate 1"});
#line 190
 await testRunner.WhenAsync("I assign the following operator to the merchants", ((string)(null)), table78, "When ");
#line hidden
                Reqnroll.Table table79 = new Reqnroll.Table(new string[] {
                            "EmailAddress",
                            "Password",
                            "GivenName",
                            "FamilyName",
                            "MerchantName",
                            "EstateName"});
                table79.AddRow(new string[] {
                            "merchantuser1@testmerchant1.co.uk",
                            "123456",
                            "TestMerchant",
                            "User1",
                            "Test Merchant 1",
                            "Test Estate 1"});
#line 193
 await testRunner.WhenAsync("I create the following security users", ((string)(null)), table79, "When ");
#line hidden
                Reqnroll.Table table80 = new Reqnroll.Table(new string[] {
                            "DeviceIdentifier",
                            "MerchantName",
                            "EstateName"});
                table80.AddRow(new string[] {
                            "TestDevice1",
                            "Test Merchant 1",
                            "Test Estate 1"});
#line 196
 await testRunner.WhenAsync("I add the following devices to the merchant", ((string)(null)), table80, "When ");
#line hidden
                Reqnroll.Table table81 = new Reqnroll.Table(new string[] {
                            "EstateName",
                            "MerchantName",
                            "ContractDescription"});
                table81.AddRow(new string[] {
                            "Test Estate 1",
                            "Test Merchant 1",
                            "Safaricom Contract"});
#line 199
 await testRunner.WhenAsync("I add the following contracts to the following merchants", ((string)(null)), table81, "When ");
#line hidden
                Reqnroll.Table table82 = new Reqnroll.Table(new string[] {
                            "UpdateMerchantName",
                            "SettlementSchedule",
                            "EstateName",
                            "MerchantName"});
                table82.AddRow(new string[] {
                            "Update Merchant 1",
                            "Monthly",
                            "Test Estate 1",
                            "Test Merchant 1"});
#line 202
 await testRunner.WhenAsync("I update the merchants with the following details", ((string)(null)), table82, "When ");
#line hidden
                Reqnroll.Table table83 = new Reqnroll.Table(new string[] {
                            "AddressLine1",
                            "AddressLine2",
                            "AddressLine3",
                            "AddressLine4",
                            "Town",
                            "Region",
                            "Country",
                            "EstateName",
                            "MerchantName"});
                table83.AddRow(new string[] {
                            "Address Line 1U",
                            "Address Line 2",
                            "Address Line 3",
                            "Address Line 4",
                            "TestTownU",
                            "Test RegionU",
                            "United KingdomU",
                            "Test Estate 1",
                            "Test Merchant 1"});
#line 205
 await testRunner.WhenAsync("I update the merchants address with the following details", ((string)(null)), table83, "When ");
#line hidden
                Reqnroll.Table table84 = new Reqnroll.Table(new string[] {
                            "ContactName",
                            "EmailAddress",
                            "PhoneNumber",
                            "EstateName",
                            "MerchantName"});
                table84.AddRow(new string[] {
                            "Test Contact 1U",
                            "testcontact1update@merchant1.co.uk",
                            "12345678",
                            "Test Estate 1",
                            "Test Merchant 1"});
#line 208
 await testRunner.WhenAsync("I update the merchants contact with the following details", ((string)(null)), table84, "When ");
#line hidden
                Reqnroll.Table table85 = new Reqnroll.Table(new string[] {
                            "OriginalDeviceIdentifier",
                            "NewDeviceIdentifier",
                            "MerchantName",
                            "EstateName"});
                table85.AddRow(new string[] {
                            "TestDevice1",
                            "TestDevice2",
                            "Test Merchant 1",
                            "Test Estate 1"});
#line 211
 await testRunner.WhenAsync("I swap the merchant device the device is swapped", ((string)(null)), table85, "When ");
#line hidden
#line 214
 await testRunner.WhenAsync("I remove the contract \'Safaricom Contract\' from merchant \'Test Merchant 1\' on \'Te" +
                        "st Estate 1\' the contract is removed", ((string)(null)), ((Reqnroll.Table)(null)), "When ");
#line hidden
#line 215
 await testRunner.WhenAsync("I remove the operator \'Test Operator 1\' from merchant \'Test Merchant 1\' on \'Test " +
                        "Estate 1\' the operator is removed", ((string)(null)), ((Reqnroll.Table)(null)), "When ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
    }
}
#pragma warning restore
#endregion
